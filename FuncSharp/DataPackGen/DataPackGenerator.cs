namespace FuncSharp.DataPackGen;

public class DataPackGenerator
{
    public string Path { get; set; }
    public string Namespace { get; set; }
    public List<Entrypoint> Entrypoints { get; } = new();

    private const string DatapackFormat = "7";

    public DataPackGenerator(string datapackPath, string namespaceName)
    {
        Path = datapackPath;
        
        if (System.IO.Path.GetFileName(namespaceName).Any(char.IsUpper))
            throw new("Namespace name must be lowercase!");

        Namespace = namespaceName;
    }


    public void AddEntrypoint(Entrypoint entrypoint)
    {
        Entrypoints.Add(entrypoint);
    }

    public void Generate()
    {
        // Make sure the folder exists
        Directory.CreateDirectory(Path);

        // Create the pack.mcmeta file
        File.WriteAllText(System.IO.Path.Join(Path, "pack.mcmeta"), GeneratePackMcMeta());

        // Create the data folder
        Directory.CreateDirectory(System.IO.Path.Join(Path, "data"));

        GenerateMinecraftNamespace();

        // Generate the datapack namespace
        Directory.CreateDirectory(System.IO.Path.Join(Path, "data", Namespace, "functions"));

        foreach (Entrypoint entrypoint in Entrypoints)
        {
            entrypoint.GenerateFile(Path, this);
        }
    }

    private void GenerateMinecraftNamespace()
    {
        // Create the functions folder
        Directory.CreateDirectory(System.IO.Path.Join(Path, "data", "minecraft", "tags", "functions"));

        // Create the tick.json file
        File.WriteAllText(System.IO.Path.Join(Path, "data", "minecraft", "tags", "functions", "tick.json"), GenerateTickJson());

        // Create the load.json file
        File.WriteAllText(System.IO.Path.Join(Path, "data", "minecraft", "tags", "functions", "load.json"), GenerateLoadJson());
    }

    private string GenerateLoadJson(bool replace = false)
    {
        string json = "{\"replace\": " + replace.ToString().ToLower() + ", \"values\": [";
        // Add all the entrypoints
        foreach (Entrypoint entrypoint in Entrypoints)
        {
            // But only if they actually are load entrypoints
            if (entrypoint is LoadEntrypoint tick)
            {
                json += $@"""{Namespace}:{tick.Name}"",";
            }
        }

        // Remove the last comma
        json = json.TrimEnd(',');

        json += "]}";

        return json;
    }

    private string GenerateTickJson(bool replace = false)
    {
        string json = "{\"replace\": " + replace.ToString().ToLower() + ", \"values\": [";

        // Add all the entrypoints
        foreach (Entrypoint entrypoint in Entrypoints)
        {
            // But only if they actually are tick entrypoints
            if (entrypoint is TickEntrypoint tick)
            {
                json += $@"""{Namespace}:{tick.Name}"",";
            }
        }

        // Remove the last comma
        json = json.TrimEnd(',');

        json += "]}";

        return json;
    }

    /// <summary>
    /// Generates a basic pack.mcmeta file for a datapack.
    /// </summary>
    /// <returns></returns>
    private static string GeneratePackMcMeta()
    {
        return
            "{\"pack\": {\"pack_format\":" + DatapackFormat + ",\"description\": \"Generated by McFuncSharp\"}}";
    }
}